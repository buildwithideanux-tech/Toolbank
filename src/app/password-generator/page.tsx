'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import ToolLayout from '@/components/layout/ToolLayout';
import FormField, { Input, Button } from '@/components/ui/FormField';
import Loading from '@/components/ui/Loading';
import { Copy, RefreshCw, Eye, EyeOff, Download, Shield, AlertTriangle } from 'lucide-react';

const passwordSchema = z.object({
  length: z.number().min(4, 'Minimum length is 4').max(128, 'Maximum length is 128'),
  includeUppercase: z.boolean(),
  includeLowercase: z.boolean(),
  includeNumbers: z.boolean(),
  includeSymbols: z.boolean(),
  excludeSimilar: z.boolean(),
}).refine(data => 
  data.includeUppercase || data.includeLowercase || data.includeNumbers || data.includeSymbols,
  { message: 'At least one character type must be selected' }
);

type PasswordFormData = z.infer<typeof passwordSchema>;

const PasswordGenerator = () => {
  const [password, setPassword] = useState<string>('');
  const [showPassword, setShowPassword] = useState(true);
  const [strength, setStrength] = useState<{ score: number; label: string; color: string }>({ score: 0, label: '', color: '' });
  const [copied, setCopied] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [passwordHistory, setPasswordHistory] = useState<string[]>([]);
  
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<PasswordFormData>({
    resolver: zodResolver(passwordSchema),
    defaultValues: {
      length: 16,
      includeUppercase: true,
      includeLowercase: true,
      includeNumbers: true,
      includeSymbols: true,
      excludeSimilar: false,
    },
  });

  const generatePassword = async (data: PasswordFormData) => {
    setIsGenerating(true);

    // Simulate generation delay for better UX
    await new Promise(resolve => setTimeout(resolve, 300));
    let charset = '';
    
    if (data.includeLowercase) charset += 'abcdefghijklmnopqrstuvwxyz';
    if (data.includeUppercase) charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    if (data.includeNumbers) charset += '0123456789';
    if (data.includeSymbols) charset += '!@#$%^&*()_+-=[]{}|;:,.<>?';
    
    if (data.excludeSimilar) {
      charset = charset.replace(/[il1Lo0O]/g, '');
    }

    let newPassword = '';
    for (let i = 0; i < data.length; i++) {
      newPassword += charset.charAt(Math.floor(Math.random() * charset.length));
    }
    
    setPassword(newPassword);
    calculateStrength(newPassword);

    // Add to history (keep last 5 passwords)
    setPasswordHistory(prev => [newPassword, ...prev.slice(0, 4)]);

    setIsGenerating(false);
  };

  const calculateStrength = (pwd: string) => {
    let score = 0;
    
    // Length bonus
    if (pwd.length >= 8) score += 1;
    if (pwd.length >= 12) score += 1;
    if (pwd.length >= 16) score += 1;
    
    // Character variety
    if (/[a-z]/.test(pwd)) score += 1;
    if (/[A-Z]/.test(pwd)) score += 1;
    if (/[0-9]/.test(pwd)) score += 1;
    if (/[^A-Za-z0-9]/.test(pwd)) score += 1;
    
    // Complexity bonus
    if (pwd.length >= 20) score += 1;
    
    let label = '';
    let color = '';
    
    if (score <= 2) {
      label = 'Weak';
      color = 'text-red-600 bg-red-50';
    } else if (score <= 4) {
      label = 'Fair';
      color = 'text-yellow-600 bg-yellow-50';
    } else if (score <= 6) {
      label = 'Good';
      color = 'text-blue-600 bg-blue-50';
    } else {
      label = 'Strong';
      color = 'text-green-600 bg-green-50';
    }
    
    setStrength({ score, label, color });
  };

  const onSubmit = (data: PasswordFormData) => {
    generatePassword(data);
  };

  const copyPassword = async () => {
    if (!password) return;

    try {
      await navigator.clipboard.writeText(password);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy password:', error);
    }
  };

  const downloadPassword = () => {
    if (!password) return;

    const data = {
      password: password,
      strength: strength.label,
      length: password.length,
      generated: new Date().toISOString(),
      note: 'Generated by ToolBank Password Generator'
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `password-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const relatedTools = [
    {
      name: 'QR Code Generator',
      href: '/qr-code-generator',
      description: 'Generate QR codes for any text or URL',
    },
    {
      name: 'JSON Formatter',
      href: '/json-formatter',
      description: 'Format and validate JSON data',
    },
    {
      name: 'HTML Minifier',
      href: '/html-minifier',
      description: 'Minify HTML code',
    },
  ];
  return (
    <ToolLayout
        title="Secure Password Generator - Create Strong Random Passwords"
        description="Free secure password generator with custom length, symbols & strength analysis. Generate strong random passwords for accounts, WiFi & security with instant strength checking."
        slug="password-generator"
        keywords={['secure password generator', 'strong password generator', 'random password creator', 'password strength checker', 'secure password maker', 'WiFi password generator']}
        relatedTools={relatedTools}
      >
        <div className="space-y-8">
          {/* Header */}
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-4">Password Generator</h1>
            <p className="text-lg text-gray-600">
              Generate secure, random passwords with customizable length and character types. 
              Create strong passwords to protect your accounts and sensitive information.
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Generator Form */}
            <div className="bg-gray-50 rounded-lg p-6">
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                <FormField 
                  label="Password Length" 
                  required
                  error={errors.length}
                  description="Choose between 4 and 128 characters"
                >
                  <Input
                    type="number"
                    min="4"
                    max="128"
                    {...register('length', { valueAsNumber: true })}
                    error={!!errors.length}
                  />
                </FormField>

                <div className="space-y-4">
                  <h3 className="text-sm font-medium text-gray-700">Character Types</h3>
                  
                  <div className="space-y-3">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        {...register('includeUppercase')}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span className="ml-2 text-sm text-gray-700">Uppercase letters (A-Z)</span>
                    </label>
                    
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        {...register('includeLowercase')}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span className="ml-2 text-sm text-gray-700">Lowercase letters (a-z)</span>
                    </label>
                    
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        {...register('includeNumbers')}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span className="ml-2 text-sm text-gray-700">Numbers (0-9)</span>
                    </label>
                    
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        {...register('includeSymbols')}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span className="ml-2 text-sm text-gray-700">Symbols (!@#$%^&*)</span>
                    </label>
                    
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        {...register('excludeSimilar')}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span className="ml-2 text-sm text-gray-700">Exclude similar characters (i, l, 1, L, o, 0, O)</span>
                    </label>
                  </div>
                  
                  {errors.root && (
                    <p className="text-sm text-red-600">{errors.root.message}</p>
                  )}
                </div>

                <Button type="submit" size="lg" disabled={isGenerating} className="w-full">
                  {isGenerating ? <Loading size="sm" text="Generating..." /> : 'Generate Password'}
                </Button>
              </form>
            </div>

            {/* Password Display */}
            <div className="bg-white rounded-lg border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Generated Password</h3>
              
              {password ? (
                <div className="space-y-4">
                  <div className="relative">
                    <div className="bg-gray-50 p-4 rounded-lg border font-mono text-lg break-all">
                      {showPassword ? password : '•'.repeat(password.length)}
                    </div>
                    <div className="absolute top-2 right-2 flex space-x-2">
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="p-2 text-gray-500 hover:text-gray-700"
                      >
                        {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </button>
                      <button
                        type="button"
                        onClick={copyPassword}
                        className="p-2 text-gray-500 hover:text-gray-700"
                        title={copied ? 'Copied!' : 'Copy password'}
                      >
                        <Copy className="h-4 w-4" />
                      </button>
                      <button
                        type="button"
                        onClick={downloadPassword}
                        className="p-2 text-gray-500 hover:text-gray-700"
                        title="Download password"
                      >
                        <Download className="h-4 w-4" />
                      </button>
                    </div>
                  </div>

                  {copied && (
                    <p className="text-sm text-green-600">Password copied to clipboard!</p>
                  )}

                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-600">Strength:</span>
                      <span className={`px-2 py-1 rounded text-xs font-medium ${strength.color}`}>
                        {strength.label}
                      </span>
                    </div>
                    
                    <Button
                      onClick={() => generatePassword(watch())}
                      variant="outline"
                      size="sm"
                      className="flex items-center space-x-1"
                    >
                      <RefreshCw className="h-4 w-4" />
                      <span>Regenerate</span>
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="bg-gray-50 p-8 rounded-lg text-center">
                  <p className="text-gray-500">Click "Generate Password" to create a secure password</p>
                </div>
              )}
            </div>
          </div>

          {/* Password History */}
          {passwordHistory.length > 0 && (
            <div className="bg-gray-50 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Passwords</h3>
              <div className="space-y-2">
                {passwordHistory.map((pwd, index) => (
                  <div key={index} className="bg-white rounded p-3 flex justify-between items-center">
                    <div className="font-mono text-sm text-gray-700 truncate flex-1 mr-4">
                      {showPassword ? pwd : '•'.repeat(pwd.length)}
                    </div>
                    <button
                      onClick={() => navigator.clipboard.writeText(pwd)}
                      className="p-1 text-gray-500 hover:text-gray-700"
                      title="Copy password"
                    >
                      <Copy className="h-4 w-4" />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Information Section */}
          <div className="prose max-w-none">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Password Security Best Practices</h2>
            <p className="text-gray-600 mb-4">
              Strong passwords are your first line of defense against cyber attacks. A good password should be 
              long, complex, unique, and difficult to guess.
            </p>

            <h3 className="text-xl font-semibold text-gray-900 mb-3">Password Strength Guidelines</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              <div className="bg-green-50 p-4 rounded-lg">
                <h4 className="font-medium text-green-900">Strong Passwords</h4>
                <ul className="text-green-700 text-sm mt-2 space-y-1">
                  <li>• At least 12 characters long</li>
                  <li>• Mix of uppercase and lowercase</li>
                  <li>• Include numbers and symbols</li>
                  <li>• Unique for each account</li>
                </ul>
              </div>
              <div className="bg-red-50 p-4 rounded-lg">
                <h4 className="font-medium text-red-900">Avoid These</h4>
                <ul className="text-red-700 text-sm mt-2 space-y-1">
                  <li>• Personal information</li>
                  <li>• Dictionary words</li>
                  <li>• Common patterns (123456)</li>
                  <li>• Reusing passwords</li>
                </ul>
              </div>
            </div>

            <h3 className="text-xl font-semibold text-gray-900 mb-3">Password Management Tips</h3>
            <div className="space-y-3 mb-6">
              <div className="bg-blue-50 p-3 rounded">
                <strong>Use a Password Manager:</strong> Store unique passwords securely for all accounts
              </div>
              <div className="bg-blue-50 p-3 rounded">
                <strong>Enable Two-Factor Authentication:</strong> Add an extra layer of security
              </div>
              <div className="bg-blue-50 p-3 rounded">
                <strong>Regular Updates:</strong> Change passwords if a service is breached
              </div>
            </div>

            <h3 className="text-xl font-semibold text-gray-900 mb-3">Frequently Asked Questions</h3>
            <div className="space-y-4">
              <div>
                <h4 className="font-medium text-gray-900">How often should I change my passwords?</h4>
                <p className="text-gray-600">
                  Change passwords immediately if a service is breached or compromised. Otherwise, 
                  focus on using unique, strong passwords rather than frequent changes.
                </p>
              </div>
              <div>
                <h4 className="font-medium text-gray-900">Is it safe to use password generators?</h4>
                <p className="text-gray-600">
                  Yes, password generators create truly random passwords that are much stronger than 
                  human-created passwords. This tool generates passwords locally in your browser.
                </p>
              </div>
              <div>
                <h4 className="font-medium text-gray-900">What makes a password strong?</h4>
                <p className="text-gray-600">
                  Length is the most important factor, followed by character variety. A 16-character 
                  password with mixed character types is exponentially harder to crack than shorter passwords.
                </p>
              </div>
            </div>
          </div>
        </div>
      </ToolLayout>
  );
};

export default PasswordGenerator;
